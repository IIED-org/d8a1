***************
*** 62,68 ****
  
      // Add a notification.
      $notification = $this->createNotification([
-       'emails' => 'foo@example.com, bar@example.com',
        'transitions' => [
          'create_new_draft' => 'create_new_draft',
          'publish' => 'publish',
--- 64,79 ----
  
      // Add a notification.
      $notification = $this->createNotification([
+       // Test literal, Twig, and Token email addresses and various separators.
+       'to' => " foo@example.com, {{ 'bar@example.com'|upper }}\n [site:mail] ",
+       'cc' => " foo-cc@example.com, {{ 'bar-cc@example.com'|upper }}\n [site:mail] ",
+       'bcc' => " foo-bcc@example.com, {{ 'bar-bcc@example.com'|upper }}\n [site:mail] ",
+       // default to blank to test auto-setting
+       'from' => '',
+       'replyto' => " [site:mail] ",
+       'subject' => ' [NOTICE] [site:mail] Testing {{ "Twig"|upper }} ',
+       'abort' => 'abort@example.com',
+       'debug' => FALSE,
        'transitions' => [
          'create_new_draft' => 'create_new_draft',
          'publish' => 'publish',
***************
*** 73,92 ****
      $entity = \Drupal::entityTypeManager()->getStorage('entity_test_rev')->loadUnchanged($entity->id());
      $this->assertEquals('draft', $entity->moderation_state->value);
      $entity->save();
-     $this->assertMail('from', 'admin@example.com');
-     $this->assertMail('to', 'admin@example.com');
-     $this->assertBccRecipients('foo@example.com,bar@example.com');
-     $this->assertMail('id', 'content_moderation_notifications_content_moderation_notification');
-     $this->assertMail('subject', PlainTextOutput::renderFromHtml($notification->getSubject()));
      $this->assertCount(1, $this->getMails());
  
      $entity->moderation_state = 'published';
      $entity->save();
-     $this->assertMail('from', 'admin@example.com');
-     $this->assertMail('to', 'admin@example.com');
-     $this->assertBccRecipients('foo@example.com,bar@example.com');
-     $this->assertMail('id', 'content_moderation_notifications_content_moderation_notification');
-     $this->assertMail('subject', PlainTextOutput::renderFromHtml($notification->getSubject()));
      $this->assertCount(2, $this->getMails());
  
      // No mail should be sent for irrelevant transition.
--- 84,117 ----
      $entity = \Drupal::entityTypeManager()->getStorage('entity_test_rev')->loadUnchanged($entity->id());
      $this->assertEquals('draft', $entity->moderation_state->value);
      $entity->save();
+ 
+     // Get data for displaying for test failures
+     $emails = $this->getMails();
+     $last_email = end($emails);
+ 
+     $this->assertMail('to', 'foo@example.com,BAR@EXAMPLE.COM,admin@example.com', "Failed: Draft TO=[{$last_email['to']}]");
+     $this->assertCcRecipients('foo-cc@example.com,BAR-CC@EXAMPLE.COM,admin@example.com', "Failed: Draft BCC={$last_email['headers']['cc']}");
+     $this->assertBccRecipients('foo-bcc@example.com,BAR-BCC@EXAMPLE.COM,admin@example.com', "Failed: Draft BCC={$last_email['headers']['bcc']}");
+     $this->assertMail('from', 'admin@example.com', "Failed: Draft FROM={$last_email['from']}");
+     $this->assertMail('reply-to', 'admin@example.com', "Failed: Draft REPLY-TO=[{$last_email['reply-to']}]");
+     $this->assertMail('id', 'content_moderation_notifications_example_notification', "Failed: Draft ID={$last_email['id']}");
+     $this->assertMail('subject', '[NOTICE] admin@example.com Testing TWIG', "Failed: Draft SUBJECT={$last_email['subject']}");
      $this->assertCount(1, $this->getMails());
  
      $entity->moderation_state = 'published';
      $entity->save();
+ 
+     // Get data for displaying for test failures
+     $emails = $this->getMails();
+     $last_email = end($emails);
+ 
+     $this->assertMail('to', 'foo@example.com,BAR@EXAMPLE.COM,admin@example.com', "Failed: Published TO=[{$last_email['to']}]");
+     $this->assertCcRecipients('foo-cc@example.com,BAR-CC@EXAMPLE.COM,admin@example.com', "Failed: Published BCC={$last_email['headers']['cc']}");
+     $this->assertBccRecipients('foo-bcc@example.com,BAR-BCC@EXAMPLE.COM,admin@example.com', "Failed: Published BCC={$last_email['headers']['bcc']}");
+     $this->assertMail('from', 'admin@example.com', "Failed: Published FROM={$last_email['from']}");
+     $this->assertMail('reply-to', 'admin@example.com', "Failed: Published REPLY-TO=[{$last_email['reply-to']}]");
+     $this->assertMail('id', 'content_moderation_notifications_example_notification', "Failed: Published ID={$last_email['id']}");
+     $this->assertMail('subject', '[NOTICE] admin@example.com Testing TWIG', "Failed: Published SUBJECT={$last_email['subject']}");
      $this->assertCount(2, $this->getMails());
  
      // No mail should be sent for irrelevant transition.
