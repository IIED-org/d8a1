***************
*** 14,19 ****
  use Drupal\Core\Form\ConfirmFormInterface;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Render\Element;
  
  require_once __DIR__ . '/includes/helpers.inc';
  
--- 14,20 ----
  use Drupal\Core\Form\ConfirmFormInterface;
  use Drupal\Core\Form\FormStateInterface;
  use Drupal\Core\Render\Element;
+ use Drupal\field_group\Element\VerticalTabs;
  
  require_once __DIR__ . '/includes/helpers.inc';
  
***************
*** 117,122 ****
  
  }
  
  /**
   * Implements hook_form_FORM_ID_alter().
   * Using hook_form_field_ui_form_display_overview_form_alter.
--- 118,143 ----
  
  }
  
+ /**
+  * Implements hook_element_info_alter().
+  */
+ function field_group_element_info_alter(array &$info) {
+   // Core does not support #group options on vertical tabs. Add support for it.
+   if (isset($info['vertical_tabs'])) {
+ 
+     if (!isset($info['vertical_tabs']['#process'])) {
+       $info['vertical_tabs']['#process'] = [];
+     }
+ 
+     if (!isset($info['vertical_tabs']['#pre_render'])) {
+       $info['vertical_tabs']['#pre_render'] = [];
+     }
+ 
+     $info['vertical_tabs']['#process'][] = [VerticalTabs::class, 'processGroup'];
+     $info['vertical_tabs']['#pre_render'][] = [VerticalTabs::class, 'preRenderGroup'];
+   }
+ }
+ 
  /**
   * Implements hook_form_FORM_ID_alter().
   * Using hook_form_field_ui_form_display_overview_form_alter.
***************
*** 175,181 ****
        ];
  
        field_group_attach_groups($form, $context);
-       $form['#pre_render'][] = 'field_group_form_pre_render';
      }
    }
  
--- 196,202 ----
        ];
  
        field_group_attach_groups($form, $context);
+       $form['#process'][] = 'field_group_form_process';
      }
    }
  
***************
*** 196,202 ****
    ];
  
    field_group_attach_groups($entity_form, $context);
-   $entity_form['#pre_render'][] = 'field_group_form_pre_render';
  }
  
  /**
--- 217,223 ----
    ];
  
    field_group_attach_groups($entity_form, $context);
+   $entity_form['#process'][] = 'field_group_form_process';
  }
  
  /**
***************
*** 235,273 ****
  
  /**
   * Pre render callback for rendering groups.
-  * @see field_group_field_attach_form
-  * @param $element Form that is being rendered.
   */
- function field_group_form_pre_render($element) {
-   if (empty($element['#field_group_form_pre_render'])) {
-     $element['#field_group_form_pre_render'] = TRUE;
-     field_group_build_entity_groups($element, 'form');
    }
    return $element;
  }
  
  /**
   * Pre render callback for rendering groups on entities without theme hook.
-  * @param $element
   *   Entity being rendered.
   */
- function field_group_entity_view_pre_render($element) {
    field_group_build_entity_groups($element, 'view');
    return $element;
  }
  
  /**
   * Implements hook_field_group_pre_render().
   *
-  * @param Array $element
   *   Group be誰ng rendered.
-  * @param Object $group
   *   The Field group info.
   * @param $rendering_object
   *   The entity / form be誰ng rendered
   */
  function field_group_field_group_pre_render(&$element, &$group, &$rendering_object) {
- 
    // Add all field_group format types to the js settings.
    $element['#attached']['drupalSettings']['field_group'] = [
      $group->format_type => [
--- 256,379 ----
  
  /**
   * Pre render callback for rendering groups.
+  *
+  * @param array $element
+  *   Form that is being rendered.
+  *
+  * @deprecated Use field_group_form_process instead.
   */
+ function field_group_form_pre_render(array $element) {
+   return field_group_form_process($element);
+ }
+ 
+ /**
+  * Process callback for field groups.
+  *
+  * @param array $element
+  *   Form that is being processed.
+  *
+  * @return array
+  */
+ function field_group_form_process(array &$element) {
+   if (empty($element['#field_group_form_process'])) {
+     $element['#field_group_form_process'] = TRUE;
+     if (empty($element['#fieldgroups'])) {
+       return $element;
+     }
+ 
+     // Create all groups and keep a flat list of references to these groups.
+     $group_references = [];
+     foreach ($element['#fieldgroups'] as $group_name => $group) {
+       if (!isset($element[$group_name])) {
+         $element[$group_name] = [];
+       }
+ 
+       $group_parents = $element['#array_parents'];
+       $group_parents[] = empty($group->parent_name) ? $group->region : $group->parent_name;
+       $group_references[$group_name] = &$element[$group_name];
+       $element[$group_name]['#group'] = implode('][', $group_parents);
+ 
+       // Use array parents to set the group name. This will cover multilevel forms (eg paragraphs).
+       $parents = $element['#array_parents'];
+       $parents[] = $group_name;
+       $element[$group_name]['#parents'] = $parents;
+       $group_children_parent_group = implode('][', $parents);
+       foreach ($group->children as $child) {
+         $element[$child]['#group'] = $group_children_parent_group;
+       }
+     }
+ 
+     foreach ($element['#fieldgroups'] as $group_name => $group) {
+       $field_group_element = &$element[$group_name];
+ 
+       // Let modules define their wrapping element.
+       // Note that the group element has no properties, only elements.
+       foreach (Drupal::moduleHandler()->getImplementations('field_group_form_process') as $module) {
+         // The intention here is to have the opportunity to alter the
+         // elements, as defined in hook_field_group_formatter_info.
+         // Note, implement $element by reference!
+         $function = $module . '_field_group_form_process';
+         $function($field_group_element, $group, $element);
+       }
+ 
+       // Allow others to alter the pre_render.
+       Drupal::moduleHandler()->alter('field_group_form_process', $field_group_element, $group, $element);
+     }
+ 
+     // Allow others to alter the complete processed build.
+     Drupal::moduleHandler()->alter('field_group_form_process_build', $element);
    }
+ 
    return $element;
  }
  
  /**
   * Pre render callback for rendering groups on entities without theme hook.
+  *
+  * @param array $element
   *   Entity being rendered.
   */
+ function field_group_entity_view_pre_render(array $element) {
    field_group_build_entity_groups($element, 'view');
    return $element;
  }
  
+ /**
+  * Implements hook_field_group_form_process().
+  */
+ function field_group_field_group_form_process(array &$element, &$group, &$complete_form) {
+   // Add all field_group format types to the js settings.
+   $element['#attached']['drupalSettings']['field_group'] = [
+     $group->format_type => [
+       'mode' => $group->mode,
+       'context' => $group->context,
+       'settings' => $group->format_settings,
+     ],
+   ];
+ 
+   $element['#weight'] = $group->weight;
+ 
+   // Call the pre render function for the format type.
+   $manager = Drupal::service('plugin.manager.field_group.formatters');
+   $plugin = $manager->getInstance([
+     'format_type' => $group->format_type,
+     'configuration' => ['label' => $group->label, 'settings' => $group->format_settings],
+     'group' => $group,
+   ]);
+   $plugin->process($element, $complete_form);
+ }
+ 
  /**
   * Implements hook_field_group_pre_render().
   *
+  * @param array $element
   *   Group be誰ng rendered.
+  * @param object $group
   *   The Field group info.
   * @param $rendering_object
   *   The entity / form be誰ng rendered
   */
  function field_group_field_group_pre_render(&$element, &$group, &$rendering_object) {
    // Add all field_group format types to the js settings.
    $element['#attached']['drupalSettings']['field_group'] = [
      $group->format_type => [
***************
*** 286,301 ****
      'configuration' => ['label' => $group->label, 'settings' => $group->format_settings],
      'group' => $group,
    ]);
-   $plugin->preRender($element, $rendering_object);
  
  }
  
  /**
   * Implements hook_field_group_build_pre_render_alter().
-  * @param Array $elements by address.
   */
  function field_group_field_group_build_pre_render_alter(& $element) {
- 
    // Someone is doing a node view, in a node view. Reset content.
    if (isset($element['#node']->content) && count($element['#node']->content) > 0) {
      $element['#node']->content = [];
--- 392,420 ----
      'configuration' => ['label' => $group->label, 'settings' => $group->format_settings],
      'group' => $group,
    ]);
+   if ($plugin) {
+     $plugin->preRender($element, $rendering_object);
+   }
+ }
  
+ /**
+  * Implements hook_field_group_form_process_build_alter().
+  *
+  * @param array $elements
+  *   By address.
+  */
+ function field_group_field_group_form_process_build_alter(array &$element) {
+   $groups = array_keys($element['#fieldgroups']);
+   field_group_remove_empty_form_groups($element, $groups, $element['#entity_type']);
  }
  
  /**
   * Implements hook_field_group_build_pre_render_alter().
+  *
+  * @param array $elements
+  *   By address.
   */
  function field_group_field_group_build_pre_render_alter(& $element) {
    // Someone is doing a node view, in a node view. Reset content.
    if (isset($element['#node']->content) && count($element['#node']->content) > 0) {
      $element['#node']->content = [];
***************
*** 308,326 ****
    if ($display) {
      field_group_remove_empty_display_groups($element, $groups);
    }
    else {
-     // Fix the problem on forms with additional settings.
-     field_group_remove_empty_form_groups('form', $element, $groups, $element['#fieldgroups'], $element['#entity_type']);
    }
- 
  }
  
  /**
   * Attach groups to the (form) build.
   *
-  * @param Array $element
   *   The part of the form.
-  *  @param Array $context
   *   The contextual information.
   */
  function field_group_attach_groups(&$element, $context) {
--- 427,444 ----
    if ($display) {
      field_group_remove_empty_display_groups($element, $groups);
    }
+   // Remove all empty groups on the form.
    else {
+     field_group_remove_empty_form_groups($element, $groups, $element['#entity_type']);
    }
  }
  
  /**
   * Attach groups to the (form) build.
   *
+  * @param array $element
   *   The part of the form.
+  * @param array $context
   *   The contextual information.
   */
  function field_group_attach_groups(&$element, $context) {
***************
*** 341,419 ****
    }
    $element['#group_children'] = $group_children;
    $element['#entity_type'] = $entity_type;
- 
  }
  
  /**
-  * Preprocess/ Pre-render callback.
   *
-  * @see field_group_form_pre_render()
   * @see field_group_theme_registry_alter
   * @see field_group_fields_nest()
-  * @param $vars preprocess vars or form element
-  * @param $context The display context (entity type, form or view)
-  * @return $element Array with re-arranged fields in groups.
   */
- function field_group_build_entity_groups(&$vars, $context = 'view') {
- 
-   if ($context == 'form') {
-     $element = &$vars;
-     $nest_vars = NULL;
    }
    else {
-     if (isset($vars['elements'])) {
-       $element = &$vars['elements'];
-     }
-     elseif (isset($vars['content'])) {
-       $element = &$vars['content'];
      }
      else {
-       if ($context === 'eck_entity') {
-         $element = &$vars['entity'];
-       }
-       else {
-         $element = &$vars;
-       }
      }
- 
-     $nest_vars = &$vars;
    }
  
    // No groups on the entity.
    if (empty($element['#fieldgroups'])) {
      return $element;
    }
  
-   // Nest the fields in the corresponding field groups.
-   field_group_fields_nest($element, $nest_vars, $context);
  
    // Allow others to alter the pre_rendered build.
    Drupal::moduleHandler()->alter('field_group_build_pre_render', $element);
  
-   // Return the element on forms.
-   if ($context == 'form') {
-     return $element;
-   }
- 
    // No groups on the entity. Prerender removed empty field groups.
    if (empty($element['#fieldgroups'])) {
      return $element;
    }
  
    // Put groups inside content if we are rendering an entity_view.
    foreach ($element['#fieldgroups'] as $group) {
      if (!empty($element[$group->group_name])) {
-       $key = field_group_get_content_element_key($context);
-       if (isset($vars[$key])) {
-         $vars[$key][$group->group_name] = $element[$group->group_name];
        }
      }
    }
- 
  }
  
  /**
-  * Recursive function to nest fields in the field groups.
   *
   * This function will take out all the elements in the form and
   * place them in the correct container element, a fieldgroup.
--- 459,539 ----
    }
    $element['#group_children'] = $group_children;
    $element['#entity_type'] = $entity_type;
  }
  
  /**
+  * Pre-render callback for entity views.
+  *
+  * @param $vars preprocess
+  *   Variables.
+  * @param $context
+  *   The display context (entity type, form or view).
+  *
+  * @return array
+  *   With re-arranged fields in groups.
   *
   * @see field_group_theme_registry_alter
   * @see field_group_fields_nest()
   */
+ function field_group_build_entity_groups(array &$vars, $context = 'view') {
+   if (isset($vars['elements'])) {
+     $element = &$vars['elements'];
+   }
+   elseif (isset($vars['content'])) {
+     $element = &$vars['content'];
    }
    else {
+     if ($context === 'eck_entity') {
+       $element = &$vars['entity'];
      }
      else {
+       $element = &$vars;
      }
    }
  
+   $nest_vars = &$vars;
+ 
    // No groups on the entity.
    if (empty($element['#fieldgroups'])) {
      return $element;
    }
  
+   // Use other nest function if field layout is active.
+   if (isset($element['_field_layout'])) {
+     field_group_field_layout_fields_nest($element, $nest_vars, $context);
+   }
+   else {
+     field_group_fields_nest($element, $nest_vars, $context);
+   }
  
    // Allow others to alter the pre_rendered build.
    Drupal::moduleHandler()->alter('field_group_build_pre_render', $element);
  
    // No groups on the entity. Prerender removed empty field groups.
    if (empty($element['#fieldgroups'])) {
      return $element;
    }
  
    // Put groups inside content if we are rendering an entity_view.
+   $render_key = field_group_get_content_element_key($context);
    foreach ($element['#fieldgroups'] as $group) {
      if (!empty($element[$group->group_name])) {
+       if (isset($vars[$render_key])) {
+         // Field layout enabled? Place it in correct region of the
+         // _field_layout key.
+         if (isset($vars[$render_key]['_field_layout'])) {
+           $vars[$render_key]['_field_layout'][$group->region][$group->group_name] = $element[$group->group_name];
+         }
+         else {
+           $vars[$render_key][$group->group_name] = $element[$group->group_name];
+         }
        }
      }
    }
  }
  
  /**
+  * Nests all the fields in the field groups.
   *
   * This function will take out all the elements in the form and
   * place them in the correct container element, a fieldgroup.
***************
*** 478,483 ****
          // If this is a group, we have to use a reference to keep the reference
          // list intact (but if it is a field we don't mind).
          $group_references[$parent_name][$child_name] = &$element[$child_name];
          $group_references[$parent_name]['#weight'] = $element['#fieldgroups'][$parent_name]->weight;
        }
  
--- 598,608 ----
          // If this is a group, we have to use a reference to keep the reference
          // list intact (but if it is a field we don't mind).
          $group_references[$parent_name][$child_name] = &$element[$child_name];
+ 
+         // Remove the #group property, otherwise core will move this element to
+         // the field layout region.
+         unset($group_references[$parent_name][$child_name]['#group']);
+ 
          $group_references[$parent_name]['#weight'] = $element['#fieldgroups'][$parent_name]->weight;
        }
  
***************
*** 492,498 ****
    foreach ($element['#fieldgroups'] as $group_name => $group) {
      field_group_pre_render($group_references[$group_name], $group, $element);
    }
  
  }
  
  /**
--- 617,684 ----
    foreach ($element['#fieldgroups'] as $group_name => $group) {
      field_group_pre_render($group_references[$group_name], $group, $element);
    }
+ }
  
+ /**
+  * Nests all the fields in the field groups.
+  *
+  * Ror entity display elements managed by field layout.
+  *
+  * @param array $element
+  * @param $vars
+  * @param $context
+  */
+ function field_group_field_layout_fields_nest(array &$element, &$vars = NULL, $context = NULL) {
+   // Create all groups and keep a flat list of references to these groups.
+   $group_references = [];
+   foreach ($element['#fieldgroups'] as $group_name => $group) {
+     // Construct own weight, as some fields (for example preprocess fields)
+     // don't have weight set.
+     $element[$group_name] = [];
+     $group_references[$group_name] = &$element[$group_name];
+   }
+ 
+   // Loop through all children looking for those that are supposed to be
+   // in groups, and insert placeholder element for the new group field in the
+   // correct location within the form structure.
+   $element_clone = [];
+   foreach (Element::children($element['_field_layout']) as $region_name) {
+     foreach (Element::children($element['_field_layout'][$region_name]) as $child_name) {
+       $element_clone['_field_layout'][$region_name][$child_name] = $element['_field_layout'][$region_name][$child_name];
+       // If this element is in a group, create the placeholder element.
+       if (isset($element['_field_layout'][$region_name]['#group_children'][$child_name])) {
+         $element_clone['_field_layout'][$region_name][$element['#group_children'][$child_name]] = [];
+       }
+     }
+   }
+ 
+   $element = array_merge($element_clone, $element);
+ 
+   // Move all children to their parents. Use the flat list of references for
+   // direct access as we don't know where in the root_element hierarchy the
+   // parent currently is situated.
+   foreach ($element['#group_children'] as $child_name => $group_name) {
+     $region = $element['#fieldgroups'][$group_name]->region;
+ 
+     // If not a group, check the content variable for empty field.
+     $key = field_group_get_content_element_key($context);
+     if (!isset($element['#fieldgroups'][$child_name]) && isset($vars[$key]['_field_layout'][$region][$child_name])) {
+       $group_references[$group_name][$child_name] = $vars[$key]['_field_layout'][$region][$child_name];
+       unset($vars[$key]['_field_layout'][$region][$child_name]);
+     }
+     // If this is a group, we have to use a reference to keep the reference
+     // list intact (but if it is a field we don't mind).
+     else {
+       $group_references[$group_name][$child_name] = &$element[$child_name];
+       unset($element[$child_name]);
+     }
+   }
+ 
+   // Bring extra element wrappers to achieve a grouping of fields.
+   // This will mainly be prefix and suffix altering.
+   foreach ($element['#fieldgroups'] as $group_name => $group) {
+     field_group_pre_render($group_references[$group_name], $group, $element);
+   }
  }
  
  /**
***************
*** 720,769 ****
  /**
   * Remove empty groups on forms.
   *
-  * @param String $parent_name
-  *   The name of the element.
   * @param array $element
   *   The element to check the empty state.
   * @param array $groups
   *   Array of group objects.
   */
- function field_group_remove_empty_form_groups($name, & $element, $groups, &$form_groups, $entity) {
- 
    $exceptions = ['user__account', 'comment__author'];
  
    $children = Element::children($element);
- 
-   $hasChildren = FALSE;
    if (count($children)) {
      foreach ($children as $childname) {
  
-       if (in_array($childname, $groups)) {
-         field_group_remove_empty_form_groups($childname, $element[$childname], $groups, $form_groups, $entity);
        }
-       $exception = $entity . '__' . $childname;
-       $hasChildren = $hasChildren ? TRUE : (isset($element[$childname]['#type']) || isset($element[$childname]['#markup']) || in_array($exception, $exceptions));
- 
      }
    }
  
-   if (!$hasChildren) {
- 
-     // Remove empty elements from the #fieldgroups.
-     if (empty($element) && isset($form_groups[$name]) && !is_array($form_groups[$name])) {
-       foreach ($form_groups as $group_name => $group) {
-         if (isset($group->children)) {
-           $group_children = array_flip($group->children);
-           if (isset($group_children[$name])) {
-             unset($form_groups[$group_name]->children[$group_children[$name]]);
-           }
-         }
-       }
-     }
- 
-     $element['#access'] = FALSE;
- 
    }
- 
  }
  
  /**
--- 906,943 ----
  /**
   * Remove empty groups on forms.
   *
   * @param array $element
   *   The element to check the empty state.
   * @param array $groups
   *   Array of group objects.
+  * @param string $entity_type
+  *   The entity type.
   */
+ function field_group_remove_empty_form_groups(&$element, $groups, $entity_type) {
    $exceptions = ['user__account', 'comment__author'];
  
    $children = Element::children($element);
+   $empty_groups_indication = array_fill_keys($groups, TRUE);
    if (count($children)) {
      foreach ($children as $childname) {
+       $exception = $entity_type . '__' . $childname;
+       $empty_element = !(isset($element[$childname]['#type']) || isset($element[$childname]['#markup']) || in_array($exception, $exceptions));
  
+       // If the element is not empty, and it has a group. Mark the group as not
+       // empty.
+       if (!$empty_element && isset($element[$childname]['#group'])) {
+         $name_prefix = implode('][', $element['#array_parents']) . '][';
+         $group_name = str_replace($name_prefix, '', $element[$childname]['#group']);
+         $empty_groups_indication[$group_name] = FALSE;
        }
      }
    }
  
+   // Set access to false for all empty groups.
+   $empty_groups = array_filter($empty_groups_indication);
+   foreach (array_keys($empty_groups) as $group_name) {
+     $element[$group_name]['#access'] = FALSE;
    }
  }
  
  /**
