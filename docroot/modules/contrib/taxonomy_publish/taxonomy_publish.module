<?php
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\Core\Access\AccessResult;

/**
 * Implements hook_form_alter().
 */
function taxonomy_publish_form_alter(&$form, &$form_state, $form_id) {
  $matches = null;
  $return_value = preg_match('/^taxonomy_term_(.)*_form$/', $form_id, $matches);
  if ($return_value) {
    $term = $form_state->getFormObject()->getEntity();

    $form['publish'] = array(
      '#type' => 'checkbox',
      '#title' => t('Published'),
      '#default_value' => _taxonomy_publish_get_term_status($term->id()),
    );
    $form['submit']['#submit'] = TRUE;

    $form['actions']['submit']['#submit'][] = '_taxonomy_publish_form_submit';
  }
}

/**
 * On Term form submit save publish status.
 */
function _taxonomy_publish_form_submit(&$form, FormStateInterface $form_state) {
  $tid = $form_state->getValue('tid');
  $status = $form_state->getValue('publish');

  $connection = \Drupal::database();

  $num_deleted = $connection->delete('taxonomy_publish')
    ->condition('tid', $tid)
    ->execute();

  $result = $connection->insert('taxonomy_publish')
    ->fields([
      'tid' => $tid,
      'status' => $status,
    ])
    ->execute();
}

/**
 * Return the status of the term
 *
 * @param $tid int
 * @return bool
 */
function _taxonomy_publish_get_term_status($tid) {
  if (!isset($tid)) {
    return TRUE;
  }

  $connection = \Drupal::database();
  $status = $connection->query("SELECT status FROM {taxonomy_publish} WHERE tid = :tid", [':tid' => $tid])->fetchField();

  return $status;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function taxonomy_publish_taxonomy_term_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $term_status = _taxonomy_publish_get_term_status($entity->id());

  if (!$term_status && !$account->hasPermission('view unpublished terms')) {
    return AccessResult::forbidden();
  }

  // No opinion.
  return AccessResult::neutral();
}

/*
 * Implements hook_views_data_alter()
 */
function taxonomy_publish_views_data() {
  // Define the return array.
  $data = [];

  // The outermost keys of $data are Views table names, which should usually
  // be the same as the hook_schema() table names.
  $data['taxonomy_publish'] = [];

  // The value corresponding to key 'table' gives properties of the table
  // itself.
  $data['taxonomy_publish']['table'] = [];

  // Within 'table', the value of 'group' (translated string) is used as a
  // prefix in Views UI for this table's fields, filters, etc. When adding
  // a field, filter, etc. you can also filter by the group.
  $data['taxonomy_publish']['table']['group'] = t('Taxonomy term');

  // Within 'table', the value of 'provider' is the module that provides schema
  // or the entity type that causes the table to exist. Setting this ensures
  // that views have the correct dependencies. This is automatically set to the
  // module that implements hook_views_data().
  $data['taxonomy_publish']['table']['provider'] = 'taxonomy_publish';


  $data['taxonomy_publish']['table']['join'] = [
    // Within the 'join' section, we list taxonomy table to automatically
    // join to. Every time 'taxonomy_term_field_data' is available in
    // a view, 'taxonomy status' will be too.
    'taxonomy_term_field_data' => [
      // Primary key field in taxonomy_term_field_data to use in the join.
      'left_field' => 'tid',
      // Foreign key field in taxonomy_publish to use in the join.
      'field' => 'tid',
      // 'extra' is an array of additional conditions on the join.
      'extra' => [],
    ],
  ];

  // Boolean field, exposed as a field, sort, and filter. The filter section
  // illustrates overriding various settings.
  $data['taxonomy_publish']['status'] = [
    'title' => t('Taxonomy term status'),
    'help' => t('Pulished/Unpublished taxonomy term.'),

    'field' => [
      // ID of field handler plugin to use.
      'id' => 'boolean',
    ],

    'sort' => [
      // ID of sort handler plugin to use.
      'id' => 'standard',
    ],

    'filter' => [
      // ID of filter handler plugin to use.
      'id' => 'boolean',
      // Override the generic field title, so that the filter uses a different
      // label in the UI.
      'label' => t('Published'),
      // Override the default BooleanOperator filter handler's 'type' setting,
      // to display this as a "Yes/No" filter instead of a "True/False" filter.
      'type' => 'yes-no',
      // Override the default Boolean filter handler's 'use_equal' setting, to
      // make the query use 'boolean_field = 1' instead of 'boolean_field <> 0'.
      'use_equal' => TRUE,
    ],
  ];
  return $data;
}
