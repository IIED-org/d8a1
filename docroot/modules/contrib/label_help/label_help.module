<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Label Help module.
 *
 * Adds an additional textfield for all Field API field types to appear
 * between the field's label and the field input itself on Drupal forms.
 */

/**
 * Implements hook_theme().
 */
function label_help_theme() {
  return [
    'label_help' => [
      'variables' => [
        'content' => NULL
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function label_help_form_alter(&$form, &$form_state, $form_id) {
  $children = array_intersect_key($form, array_flip(Element::children($form)));

  // Add theme overrides.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == 'seven') {
    $form['#attached']['library'][] = 'label_help/seven';
  }

  foreach ($children as $key => $item) {
    $form_object = $form_state->getFormObject();
    if (!method_exists($form_object, 'getEntity')) {
      continue;
    }
    $form_entity = $form_object->getEntity();
    if (!method_exists($form_entity, 'getFieldDefinition')) {
      continue;
    }
    $method = new ReflectionMethod($form_entity, 'getFieldDefinition');
    if(!$method->isPublic()) {
      continue;
    }
    $form_entity_get_field_definition_method = new ReflectionMethod($form_entity, 'getFieldDefinition');
    $field = $form_object->getEntity()->getFieldDefinition($key);

    $content = NULL;
    if (method_exists($field, 'getThirdPartySetting')) {
      $content = $field->getThirdPartySetting('label_help', 'label_help_description');
    }
    if (is_null($content) || strlen($content) === 0) {
      continue;
    }

    // Provide themable markup for the help text.
    $renderer = \Drupal::service('renderer');
    $element = [
      '#theme' => 'label_help',
      '#content' => [
        '#markup' => $content,
      ],
    ];
    $markup = $renderer->renderRoot($element);

    // Most Drupal 8 entity edit forms have fields of type 'container' with
    // an inner widget where the form element itself is attached. Attempt to
    // leverage #label_suffix where possible and fallback to alternate
    // solutions for widget types like details and fieldsets that do not
    // support #label_suffix.
    if (isset($item['#type']) && $item['#type'] == 'container') {

      // Special case for multi-value fields, which lack #label_suffix
      // support, appends the help text straight to the field title so it
      // appears in the table header, instead of inside the draggable row.
      if (!empty($item['widget']['#cardinality_multiple'])) {
        if (!empty($form[$key]['widget']['#title'])) {
          $form[$key]['widget']['#title'] .= $markup;
        }
        elseif (!empty($form[$key]['widget']['title'])) {
          $form[$key]['widget']['title']['#attributes']['class'][] = 'label';
          $form[$key]['widget']['title']['#suffix'] = $markup;
        }
      }

      // Special case for containers whose first element is to be rendered as
      // a fieldset either via #type (eg, Link fields) or #theme_wrappers (eg,
      // Date fields). Drupal's fieldset.html.twig do not support the
      // #label_prefix, so use #field_prefix instead, but be careful to not
      // overwrite content when the #field_prefix is alread defined.
      elseif ((!empty($item['widget'][0]['#type']) && $item['widget'][0]['#type'] == 'fieldset') || (!empty($item['widget'][0]['#theme_wrappers']) && $item['widget'][0]['#theme_wrappers'][0] == 'fieldset')) {

        // Prepend to existing value when #field_prefix is defined.
        if (!empty($item['widget'][0]['#field_prefix'])) {
          $form[$key]['widget'][0]['#field_prefix'] = $markup . $item['widget'][0]['#field_prefix'];
        } else {
          $form[$key]['widget'][0]['#field_prefix'] = $markup;
        }
      }

      // Special case for containers with a details widget, specified
      // either via #type or #theme_wrappers (eg Entity Browser or Address
      // fields). Drupal's details.html.twig does not support #label_prefix,
      // so we use #description instead, but be careful to not overwrite
      // content when the #description is alread defined.
      elseif ((!empty($item['widget']['#type']) && $item['widget']['#type'] == 'details') || (!empty($item['widget']['#theme_wrappers']) && $item['widget']['#theme_wrappers'][0] == 'details')) {
        if (!empty($item['widget']['#description'])) {
          $form[$key]['widget']['#description'] = $markup . $item['widget']['#description'];
        } else {
          $form[$key]['widget']['#description'] = $markup;
        }
      }

      // Special case for containers whose first element is rendered as a
      // details widget, specified either via #type or #theme_wrappers (eg
      // Address fields). Drupal's details.html.twig does not support
      // #label_prefix, so we use #description instead, but be careful to not
      // overwrite content when the #description is alread defined.
      elseif ((!empty($item['widget'][0]['#type']) && $item['widget'][0]['#type'] == 'details') || (!empty($item['widget'][0]['#theme_wrappers']) && $item['widget'][0]['#theme_wrappers'][0] == 'details')) {
        if (!empty($item['widget'][0]['#description'])) {
          $form[$key]['widget'][0]['#description'] = $markup . $item['widget'][0]['#description'];
        } else {
          $form[$key]['widget'][0]['#description'] = $markup;
        }
      }

      elseif (isset($item['widget'][0]['value'])) {
        $form[$key]['widget'][0]['value']['#label_suffix'] = $markup;
      }

      // Format used by cshs module.
      elseif (isset($item['widget'][0]['target_id']['#title'])) {
        $form[$key]['widget'][0]['target_id']['#label_suffix'] = $markup;
      }
      elseif (isset($item['widget'][0]['#title'])) {
        $form[$key]['widget'][0]['#label_suffix'] = $markup;
      }
      elseif (isset($item['widget']['#title'])) {
        $form[$key]['widget']['#label_suffix'] = $markup;
      }
      elseif (isset($item['widget']['target_id']['#title'])) {
        $form[$key]['widget']['target_id']['#label_suffix'] = $markup;
      }
    }
    // Move comments to the top for other field forms that
    // are specifically configured.
    else {
      $form[$key]['widget']['#label_suffix'] = $markup;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function label_help_form_field_config_edit_form_alter(&$form, &$form_state, $form_id) {
  $fieldConfig = $form_state->getFormObject()->getEntity();
  // Add settings for file upload widgets.
  $form['settings']['label_help_description'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Label help message'),
    '#default_value' => $fieldConfig->getThirdPartySetting('label_help', 'label_help_description'),
    '#description' => t('Help text to insert below the label and above the input form element.'),
  );
  $form['#entity_builders'][] = 'label_help_form_field_config_edit_form_builder';
}

/**
 * Entity builder for the menu configuration entity.
 */
function label_help_form_field_config_edit_form_builder($entity_type, $field, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue(['settings', 'label_help_description'])) {
    $field->setThirdPartySetting('label_help', 'label_help_description', $form_state->getValue(['settings', 'label_help_description']));
    return;
  }
  $field->unsetThirdPartySetting('label_help', 'label_help_description');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function label_help_preprocess_form_element(&$variables) {
  if (!isset($variables['element']['#name'])) {
    return;
  }
  // setting a label suffix/prefix
  $element = &$variables['element'];
  if (!empty($variables['label'])) {
    if (!empty($element['#label_prefix'])) {
      $variables['label']['#prefix'] = $element['#label_prefix'];
    }
    if (!empty($element['#label_suffix'])) {
      $variables['label']['#suffix'] = $element['#label_suffix'];
    }
  }
}

